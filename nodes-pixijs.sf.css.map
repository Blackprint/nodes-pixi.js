{"version":3,"sources":["nodes-pixijs.sf.css","src/Display/Canvas.sf"],"names":[],"mappings":"AACA,oC,CCoBC,sB,CDjBD,kC,CCoBC,W,CACC,gB,CACA,a,CACA,6B,CACA,iB","file":"nodes-pixijs.sf.css","sourcesContent":["/* MIT Licensed */\nbpic-pixi-js-display-canvas .content {\n  margin-top: 0 !important;\n}\nbpic-pixi-js-display-canvas canvas {\n  width: 280px;\n  max-height: 240px;\n  display: block;\n  border-bottom: 1px dashed white;\n  margin-bottom: 2px;\n}\n\n/*# sourceMappingURL=nodes-pixijs.sf.css.map */","## html\n<div class=\"node\" style=\"transform: translate({{ x }}px, {{ y }}px)\">\n  <sf-template path=\"Blackprint/nodes/template/routes.sf\"></sf-template>\n  <sf-template path=\"Blackprint/nodes/template/header.sf\"></sf-template>\n\n  <div class=\"content\">\n    <div class=\"left-port\">\n      <sf-template path=\"Blackprint/nodes/template/input-port.sf\"></sf-template>\n    </div>\n\n    <div class=\"right-port\">\n      <sf-template path=\"Blackprint/nodes/template/output-port.sf\"></sf-template>\n    </div>\n  </div>\n\n  <sf-template path=\"Blackprint/nodes/template/other.sf\"></sf-template>\n</div>\n\n## scss-global\nbpic-pixi-js-display-canvas {\n\t.content{\n\t\tmargin-top: 0 !important;\n\t}\n\tcanvas{\n\t\twidth: 280px;\n\t\tmax-height: 240px;\n\t\tdisplay: block;\n\t\tborder-bottom: 1px dashed white;\n\t\tmargin-bottom: 2px;\n\t}\n}\n\n\n## js-global\nBlackprint.Sketch.registerInterface('BPIC/Pixi.js/Display/Canvas',\nclass CanvasIFace extends Context.IFace.Canvas {\n\tasync init(el){\n\t\tawait super.init(el);\n\n\t\t$(this.canvas).insertBefore(this.$el('.left-port')[0]);\n\t}\n\n\t// If current component is being used on multiple container\n\tinitClone(el){\n\t\tvar app = new PIXI.Renderer({ width: this.canvas.width, height: this.canvas.height });\n\t\t$(app.view).insertBefore($('.left-port', el)[0]);\n\n\t\tlet My = this;\n\n\t\t// For destroying\n\t\tel.app = app;\n\t\tel.onPixiTicker = function(){\n\t\t\tapp.render(My.container);\n\t\t}\n\n\t\tthis.app.ticker.add(el.onPixiTicker);\n\t}\n\n\thotReloaded(){\n\t\tthis.initEvent();\n\t}\n\n\tdestroyClone(el){\n\t\t// Destroy cloned Pixi App\n\t\tel.app?.destroy();\n\n\t\tthis.app.ticker.remove(el.onPixiTicker);\n\t}\n});"]}