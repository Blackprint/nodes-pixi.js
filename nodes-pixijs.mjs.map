{"version":3,"sources":["_init.js","Sprite.js","Converter/GIF.js","Display/Canvas.js"],"names":["window","module","_SpriteNode","_GIFNode","_CanvasNode","exports","globalThis","Object","defineProperty","value","Blackprint","Environment","isBrowser","console","log","loadScope","url","hasInterface","hasDocs","PIXI","PIXIGif","PIXIBlendModes","DepsLoader","js","local","cdn","extensions","add","TickerPlugin","GifAsset","setPrototypeOf","GifSprite","prototype","Sprite","Context","createContext","EventSlot","slot","utils","renameTypeName","Texture","registerNode","Node","constructor","instance","super","this","setInterface","title","update","iface","input","Source","cables","length","output","updateTransform","x","y","scaleX","ScaleX","scaleY","ScaleY","rotate","Rotate","Port","Union","String","HTMLImageElement","HTMLCanvasElement","HTMLVideoElement","SVGElement","Default","Number","registerInterface","IFace","Interface","node","init","sprite","_emptyTexture","texture","on","from","routes","routeOut","Sketch","template","URL","gif","source","Assets","load","src","format","parser","animationSpeed","loop","autoPlay","play","stop","ArrayOf","Start","Trigger","app","ticker","start","Stop","VideoTrack","MediaStreamTrack","canvasFirstInit","Canvas","time","Date","now","Application","background","autoStart","info","SmallNotif","container","stage","canvas","renderer","resize","initEvent","My","IInput","IOutput","Input","Output","ref","cable","addChild","target","removeChild","mediaStream","captureStream","getVideoTracks","removeTrack"],"mappings":"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","file":"nodes-pixijs.mjs","sourcesContent":["// We don't have graphics node for non-browser :3\n// Let's just use this file to load .sf.mjs and .sf.css\n\nif(!window.Blackprint.Environment.isBrowser){\n\tconsole.log(\"@blackprint/nodes-pixi.js is only for browser, nodes will not be registered\");\n\treturn;\n}\n\nlet Blackprint = window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n\n\t// This will autoload (*.sf.mjs) and (*.sf.css) file for Browser\n\thasInterface: true,\n\n\t// This will autoload (*.docs.json) for Browser\n\thasDocs: true,\n});\n\nvar [ PIXI, PIXIGif, PIXIBlendModes ] = await Blackprint.DepsLoader.js({\n\twindow: ['PIXI', 'PIXIGif', 'PIXIBlendModes'],\n\n\t// need to use 'npm install' first or must exist on node_modules, will dynamically imported\n\tlocal: ['pixi.js', 'pixi.js/gif', 'pixi.js/advanced-blend-modes'],\n\n\t// for browser, Deno, or supported environment that have internet access\n\tcdn: [\n\t\t\"https://cdn.jsdelivr.net/npm/pixi.js@8.14.0/+esm\",\n\t\t\"https://cdn.jsdelivr.net/npm/pixi.js@8.14.0/gif/+esm\",\n\t\t\"https://cdn.jsdelivr.net/npm/pixi.js@8.14.0/advanced-blend-modes/+esm\",\n\t]\n});\n\nPIXI.extensions.add(PIXI.TickerPlugin);\nPIXI.extensions.add(PIXIGif.GifAsset);\nObject.setPrototypeOf(PIXIGif.GifSprite.prototype, PIXI.Sprite.prototype); // Fix type error\n\n// Global shared context\nlet Context = Blackprint.createContext('Pixi.js');\n\n// This is needed to avoid duplicated event listener when using hot reload\n// Event listener that registered with same slot will be replaced\nContext.EventSlot = {slot: 'my-private-event-slot'};\n\n// Fix minified class name\nBlackprint.utils.renameTypeName({\n\t'Texture': PIXI.Texture,\n\t'Sprite': PIXI.Sprite,\n});","/**\n * Create a sprite from media source\n * @blackprint node\n * @summary Pixi.js\n */\nBlackprint.registerNode('Pixi.js/Sprite',\nclass SpriteNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Target media source */\n\t\tSource: Blackprint.Port.Union([\n\t\t\tString,\n\t\t\tHTMLImageElement,\n\t\t\tHTMLCanvasElement,\n\t\t\tHTMLVideoElement,\n\t\t\tSVGElement,\n\t\t\tPIXI.Texture\n\t\t]),\n\t\t/** Adjust the position in x-axis */\n\t\tx: Blackprint.Port.Default(Number, 0),\n\t\t/** Adjust the position in y-axis */\n\t\ty: Blackprint.Port.Default(Number, 0),\n\t\t/** Adjust the scale in x-axis */\n\t\tScaleX: Blackprint.Port.Default(Number, 1),\n\t\t/** Adjust the scale in y-axis */\n\t\tScaleY: Blackprint.Port.Default(Number, 1),\n\t\t/** Rotate the rendered sprite */\n\t\tRotate: Blackprint.Port.Default(Number, 0),\n\t\t// SkewX: Blackprint.Port.Default(Number, 0),\n\t\t// SkewY: Blackprint.Port.Default(Number, 0),\n\t\t// PivotX: Blackprint.Port.Default(Number, 0),\n\t\t// PivotY: Blackprint.Port.Default(Number, 0),\n\t};\n\n\tstatic output = {\n\t\t/** Pixi's sprite object */\n\t\tSprite: PIXI.Sprite,\n\t}\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface('BPIC/Pixi.js/Sprite');\n\t\tiface.title = 'Sprite';\n\t}\n\n\tupdate(){\n\t\tif(this.iface.input.Source.cables.length === 0)\n\t\t\treturn;\n\n\t\tthis.output.Sprite.updateTransform({\n\t\t\tx: this.input.x,\n\t\t\ty: this.input.y,\n\t\t\tscaleX: this.input.ScaleX,\n\t\t\tscaleY: this.input.ScaleY,\n\t\t\trotate: this.input.Rotate,\n\t\t\t// skewX: this.input.SkewX,\n\t\t\t// skewY: this.input.SkewY,\n\t\t\t// pivotX: this.input.PivotX,\n\t\t\t// pivotY: this.input.PivotY,\n\t\t});\n\t}\n});\n\nBlackprint.registerInterface('BPIC/Pixi.js/Sprite',\nContext.IFace.Sprite = class SpriteIFace extends Blackprint.Interface{\n\tconstructor(node){\n\t\tsuper(node);\n\t}\n\n\tinit(){\n\t\tlet node = this.node;\n\n\t\tvar sprite = new PIXI.Sprite();\n\t\tnode.output.Sprite = sprite;\n\n\t\t// For replacing when texture source is disconnected\n\t\tsprite._emptyTexture = sprite.texture;\n\n\t\tthis.input.Source\n\t\t\t.on('value', Context.EventSlot, function(){\n\t\t\t\tnode.output.Sprite.texture = PIXI.Texture.from(node.input.Source);\n\t\t\t\tnode.update();\n\t\t\t\tnode.routes.routeOut();\n\t\t\t})\n\t\t\t.on('disconnect', Context.EventSlot, function(){\n\t\t\t\tvar sprite = node.output.Sprite;\n\t\t\t\tsprite.texture = sprite._emptyTexture;\n\t\t\t\tnode.routes.routeOut();\n\t\t\t});\n\t}\n});\n\n// For Sketch Editor (use default UI, and use similar interface)\nBlackprint.Sketch.registerInterface('BPIC/Pixi.js/Sprite', {\n\ttemplate: null\n}, Context.IFace.Sprite);","/**\n * Load GIF For Pixi.js\n * @blackprint node\n */\nBlackprint.registerNode('Pixi.js/Converter/GIF',\nclass GIFNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** URL to GIF file */\n\t\tURL: String,\n\t}\n\tstatic output = {\n\t\tSprite: PIXI.Sprite,\n\t}\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = 'GIF Loader';\n\t}\n\n\tasync update(){\n\t\tif(this.input.URL){\n\t\t\tlet gif = new PIXIGif.GifSprite({\n\t\t\t\tsource: await PIXI.Assets.load({\n\t\t\t\t\tsrc: this.input.URL,\n\t\t\t\t\tformat: 'gif',\n\t\t\t\t\tparser: 'gifLoader',\n\t\t\t\t}),\n\t\t\t\tanimationSpeed: 1,   // Normal speed\n\t\t\t\tloop: true,          // Loop playback\n\t\t\t\tautoPlay: true,      // Start playing immediately\n\t\t\t});\n\t\t\tgif.play();\n\n\t\t\tconsole.log(gif, PIXIGif.GifSprite, PIXI.Sprite)\n\t\t\tthis.output.Sprite = gif;\n\t\t}\n\t\telse {\n\t\t\tlet gif = this.output.Sprite;\n\t\t\tthis.output.Sprite = null;\n\t\t\tgif?.stop();\n\t\t}\n\t}\n});","/**\n * Canvas node for diplaying sprites\n * @blackprint node\n * @summary Pixi.js\n */\nBlackprint.registerNode('Pixi.js/Display/Canvas',\nclass CanvasNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Sprites that will be displayed into this canvas */\n\t\tSprite: Blackprint.Port.ArrayOf(PIXI.Sprite),\n\t\t/** Start rendering */\n\t\tStart: Blackprint.Port.Trigger(function({ iface }){\n\t\t\tiface.app.ticker.start();\n\t\t}),\n\t\t/** Stop rendering */\n\t\tStop: Blackprint.Port.Trigger(function({ iface }){\n\t\t\tiface.app.ticker.stop();\n\t\t}),\n\t}\n\n\tstatic output = {\n\t\t/** MediaStream track */\n\t\tVideoTrack: MediaStreamTrack,\n\t}\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface('BPIC/Pixi.js/Display/Canvas');\n\t\tiface.title = 'Display Canvas';\n\t}\n});\n\nvar canvasFirstInit = true;\nBlackprint.registerInterface('BPIC/Pixi.js/Display/Canvas',\nContext.IFace.Canvas = class CanvasIFace extends Blackprint.Interface {\n\tasync init(){\n\t\t// Initialize and save data to iface\n\t\t// So it can persist if current scope is hot reloaded\n\n\t\tlet time;\n\t\tif(canvasFirstInit) time = Date.now();\n\n\t\tthis.app = new PIXI.Application();\n\t\tawait this.app.init({\n\t\t\tbackground: '#1099bb',\n\t\t\tautoStart: false,\n\t\t\t//resizeTo: window\n\t\t});\n\n\t\tif(canvasFirstInit){\n\t\t\tlet info = \"Pixi.js init time: \"+(Date.now() - time)+'ms';\n\t\t\twindow.SmallNotif ? SmallNotif.add(info) : console.log(info);\n\n\t\t\tcanvasFirstInit = false;\n\t\t}\n\n\t\tthis.container = this.app.stage;\n\t\tthis.canvas = this.app.canvas;\n\n\t\tthis.app.renderer.resize(512, 256);\n\t\tthis.initEvent();\n\t}\n\n\tinitEvent(){\n\t\tvar My = this; // Shortcut\n\t\tconst {\n\t\t\tIInput, IOutput, // Port interface\n\t\t\tInput, Output, // Port value\n\t\t} = My.ref;\n\n\t\t// target == Port from other node, this == Port from current node\n\t\tIInput.Sprite.on('value', Context.EventSlot, function({ cable }){\n\t\t\tif(!cable.value || cable.value.length === 0) return;\n\n\t\t\tMy.app.stage.addChild(cable.value);\n\t\t\tMy.app.start();\n\t\t});\n\n\t\tIInput.Sprite.on('disconnect', Context.EventSlot, function({ target }){\n\t\t\tMy.app.stage.removeChild(target.value);\n\t\t\tif(IInput.Sprite.cables.length === 0)\n\t\t\t\tMy.app.stop();\n\t\t});\n\n\t\tIOutput.VideoTrack.on('connect', Context.EventSlot, function(){\n\t\t\tMy.mediaStream = My.canvas.captureStream();\n\t\t\tOutput.VideoTrack = My.mediaStream.getVideoTracks()[0];\n\t\t});\n\n\t\tIOutput.VideoTrack.on('disconnect', Context.EventSlot, function(){\n\t\t\tif(this.cables.length === 0){\n\t\t\t\tMy.mediaStream.removeTrack(Output.VideoTrack);\n\t\t\t\tOutput.VideoTrack.stop();\n\n\t\t\t\tOutput.VideoTrack = My.mediaStream = void 0;\n\t\t\t}\n\t\t});\n\t}\n});"]}